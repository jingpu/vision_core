; my $N = 4;
; my $R = 32;

// R-entry N-way SIMD vector regfile
; printf("regfile vector32 %d %d v32r\n", $N*32, $R); 


// List of DPDA operation natively supported in TIE
// 'min', 'max'
// 'mv', 'add', 'sub', 'mult', 'inv', 'mux',   'and', 'or'
// 'gt', 'lt', 'gte', 'lte', 'lshift', 'rshift',

// List of DPDA operation not supported
// 'clamp', 'div'

function [31:0] func_mult32 ([31:0] op1, [31:0] op2)
{
  wire do_signed = 1'b1;
  assign func_mult32  = TIEmul(op1, op2, do_signed);
}

function [31:0] func_add32 ([31:0] op1, [31:0] op2)
{
  assign func_add32  = op1 + op2;
}

function [31:0] func_sub32 ([31:0] op1, [31:0] op2)
{
  assign func_sub32  = op1 - op2;
}

function [31:0] func_and32 ([31:0] op1, [31:0] op2)
{
  assign func_and32  = op1 & op2;
}

function [31:0] func_or32 ([31:0] op1, [31:0] op2)
{
  assign func_or32  = op1 | op2;
}

function [31:0] func_inv32 ([31:0] op1)
{
  assign func_inv32  = ~op1 + 1'b1;  // invert the 2's complement
}

function [31:0] func_mux32 ([31:0] cond, [31:0] op1, [31:0] op2)
{
  assign func_mux32  = cond ? op1 : op2;
}

function [31:0] func_gt32 ([31:0] op1, [31:0] op2)
{
  wire [4:0] cmp_res;  // {lt, le, eq, ge, gt}
  wire do_signed = 1'b1;
  assign cmp_res = TIEcmp(op1, op2, do_signed);
  assign func_gt32 = cmp_res[0];
}

function [31:0] func_gte32 ([31:0] op1, [31:0] op2)
{
  wire [4:0] cmp_res;  // {lt, le, eq, ge, gt}
  wire do_signed = 1'b1;
  assign cmp_res = TIEcmp(op1, op2, do_signed);
  assign func_gte32 = cmp_res[1];
}


function [31:0] func_lt32 ([31:0] op1, [31:0] op2)
{
  wire [4:0] cmp_res;  // {lt, le, eq, ge, gt}
  wire do_signed = 1'b1;
  assign cmp_res = TIEcmp(op1, op2, do_signed);
  assign func_lt32 = cmp_res[4];
}

function [31:0] func_lte32 ([31:0] op1, [31:0] op2)
{
  wire [4:0] cmp_res;  // {lt, le, eq, ge, gt}
  wire do_signed = 1'b1;
  assign cmp_res = TIEcmp(op1, op2, do_signed);
  assign func_lte32 = cmp_res[3];
}

function [31:0] func_lshift32 ([31:0] op1, [31:0] op2)
{
   assign func_lshift32 = op1 << op2;
}


function [31:0] func_rshift32 ([31:0] op1, [31:0] op2)
{
   wire is_pos = (op1[31] == 1'b0);
   assign func_rshift32 = is_pos ? (op1 >> op2) :
                          ({32'hffff_ffff, op1} >> op2);
}

function [31:0] func_max32 ([31:0] op1, [31:0] op2)
{
   wire gt = func_gt32(op1, op2);
   assign func_max32 = func_mux32(gt, op1, op2);
}

function [31:0] func_min32 ([31:0] op1, [31:0] op2)
{
   wire lt = func_lt32(op1, op2);
   assign func_min32 = func_mux32(lt, op1, op2);
}

operation mv32.sv {out vector32 des, in AR src1}{}
{
; foreach $i (0..($N-1)) {
;   printf("  wire [31:0] res%d = src1;\n",  $i);
; } # end of 'foreach $i...'
  
  assign des = {
; for( my $i = $N-1; $i >= 1; $i -= 1 ) {
;   printf("res%d, ",$i); 
; } # end of 'foreach $i...'
  res0
  };
}

operation getr32.vv {out vector32 des, in vector32 src1}{}
{
; foreach $i (0..($N-2)) {
;   printf("  wire [31:0] res%d = src1[%d:%d];\n",  $i, ($i*32+63), ($i*32+32));
; } # end of 'foreach $i...'
; printf("  wire [31:0] res%d = 32'b0;\n",  $N-1); 

  assign des = {
; for( my $i = $N-1; $i >= 1; $i -= 1 ) {
;   printf("res%d, ",$i); 
; } # end of 'foreach $i...'
  res0
  };
}

operation getl32.vv {out vector32 des, in vector32 src1}{}
{
  wire [31:0] res0 = 32'b0;
; foreach $i (1..($N-1)) {
;   printf("  wire [31:0] res%d = src1[%d:%d];\n",  $i, ($i*32-1), ($i*32-32));
; } # end of 'foreach $i...'
	
  assign des = {
; for( my $i = $N-1; $i >= 1; $i -= 1 ) {
;   printf("res%d, ",$i); 
; } # end of 'foreach $i...'
  res0
  };
}

operation mux32.vv {out vector32 des, in vector32 src1, 
                    in vector32 src2, in vector32 src3}{}
{
; foreach $i (0..($N-1)) {
;   printf("  wire [31:0] res%d = func_mux32(src1[%d:%d], src2[%d:%d], src3[%d:%d]);\n",
;           $i, ($i*32 + 31), ($i*32), ($i*32 + 31), ($i*32), ($i*32 + 31), ($i*32));
; } # end of 'foreach $i...'

  assign des = {
; for( my $i = $N-1; $i >= 1; $i -= 1 ) {
;   printf("res%d, ",$i); 
; } # end of 'foreach $i...'
  res0
  };
}


operation inv32.vv {out vector32 des, in vector32 src1}{}
{
; foreach $i (0..($N-1)) {
;   printf("  wire [31:0] res%d = func_inv32(src1[%d:%d]);\n",
;           $i, ($i*32 + 31), ($i*32));
; } # end of 'foreach $i...'

  assign des = {
; for( my $i = $N-1; $i >= 1; $i -= 1 ) {
;   printf("res%d, ",$i); 
; } # end of 'foreach $i...'
  res0
  };
}

; # generate SIMD operation for the following binary operations
; my @ops = ( 'add32', 'sub32', 'and32', 'or32',
;             'gt32', 'lt32', 'gte32', 'lte32', 'lshift32', 'rshift32', 
;             'min32', 'max32', 'mult32');

; foreach $op (@ops) {
; printf("operation %s.vv\n", $op); 
{out vector32 des, in vector32 src1, in vector32 src2}{}
{
; foreach $i (0..($N-1)) {
;   printf("  wire [31:0] res%d = func_%s(src1[%d:%d], src2[%d:%d]);\n",
;           $i, $op, ($i*32 + 31), ($i*32), ($i*32 + 31), ($i*32));
; } # end of 'foreach $i...'

  assign des = {
; for( my $i = $N-1; $i >= 1; $i -= 1 ) {
;   printf("res%d, ",$i); 
; } # end of 'foreach $i...'
  res0
  };
}

; } # end of 'foreach $op...'

//schedule multiplies to 2 cycles
schedule my_sched {mult32.vv}
{
  def des 2;
}
  