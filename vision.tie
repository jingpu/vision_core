; my $N = 4;

// 32-entry 128b 4-way SIMD vector regfile (4x32b)
regfile vector32 128 32 v32r

// List of DPDA operation natively supported in TIE
// 'min', 'max'
// 'mv', 'add', 'sub', 'mult', 'inv', 'mux',   'and', 'or'
// 'gt', 'lt', 'gte', 'lte', 'lshift', 'rshift',

// List of DPDA operation not supported
// 'clamp', 'div'

function [31:0] func_mult32 ([31:0] op1, [31:0] op2)
{
  wire do_signed = 1'b1;
  assign func_mult32  = TIEmul(op1, op2, do_signed);
}

function [31:0] func_add32 ([31:0] op1, [31:0] op2)
{
  assign func_add32  = op1 + op2;
}

function [31:0] func_sub32 ([31:0] op1, [31:0] op2)
{
  assign func_sub32  = op1 - op2;
}

function [31:0] func_and32 ([31:0] op1, [31:0] op2)
{
  assign func_and32  = op1 & op2;
}

function [31:0] func_or32 ([31:0] op1, [31:0] op2)
{
  assign func_or32  = op1 | op2;
}

function [31:0] func_inv32 ([31:0] op1)
{
  assign func_inv32  = ~op1 + 1'b1;  // invert the 2's complement
}

function [31:0] func_mux32 ([31:0] cond, [31:0] op1, [31:0] op2)
{
  assign func_mux32  = cond ? op1 : op2;
}

function [31:0] func_gt32 ([31:0] op1, [31:0] op2)
{
  wire [4:0] cmp_res;  // {lt, le, eq, ge, gt}
  wire do_signed = 1'b1;
  assign cmp_res = TIEcmp(op1, op2, do_signed);
  assign func_gt32 = cmp_res[0];
}

function [31:0] func_gte32 ([31:0] op1, [31:0] op2)
{
  wire [4:0] cmp_res;  // {lt, le, eq, ge, gt}
  wire do_signed = 1'b1;
  assign cmp_res = TIEcmp(op1, op2, do_signed);
  assign func_gte32 = cmp_res[1];
}


function [31:0] func_lt32 ([31:0] op1, [31:0] op2)
{
  wire [4:0] cmp_res;  // {lt, le, eq, ge, gt}
  wire do_signed = 1'b1;
  assign cmp_res = TIEcmp(op1, op2, do_signed);
  assign func_lt32 = cmp_res[4];
}

function [31:0] func_lte32 ([31:0] op1, [31:0] op2)
{
  wire [4:0] cmp_res;  // {lt, le, eq, ge, gt}
  wire do_signed = 1'b1;
  assign cmp_res = TIEcmp(op1, op2, do_signed);
  assign func_lte32 = cmp_res[3];
}

function [31:0] func_lshift32 ([31:0] op1, [31:0] op2)
{
   assign func_lshift32 = op1 << op2;
}


function [31:0] func_rshift32 ([31:0] op1, [31:0] op2)
{
   assign func_rshift32 = op1 >> op2;
}

function [31:0] func_max32 ([31:0] op1, [31:0] op2)
{
   wire gt = func_gt32(op1, op2);
   assign func_max32 = func_mux32(gt, op1, op2);
}

function [31:0] func_min32 ([31:0] op1, [31:0] op2)
{
   wire gt = func_lt32(op1, op2);
   assign func_min32 = func_mux32(gt, op1, op2);
}

operation mv32.sv {out vector32 des, in AR src1}{}
{
  wire [31:0] res0 = src1;
  wire [31:0] res1 = src1;
  wire [31:0] res2 = src1;
  wire [31:0] res3 = src1;
  assign des = {res3, res2, res1, res0};
}
operation getr32.vv {out vector32 des, in vector32 src1}{}
{
  wire [31:0] res0 = src1[63:32];
  wire [31:0] res1 = src1[95:64];
  wire [31:0] res2 = src1[127:96];
  wire [31:0] res3 = 32'b0;
  assign des = {res3, res2, res1, res0};
}

operation getl32.vv {out vector32 des, in vector32 src1}{}
{
  wire [31:0] res0 = 32'b0;
  wire [31:0] res1 = src1[31:0];
  wire [31:0] res2 = src1[63:32];
  wire [31:0] res3 = src1[95:64];
  assign des = {res3, res2, res1, res0};
}

operation mult32.vv {out vector32 des, in vector32 src1, in vector32 src2}{}
{
  //4 way SIMD multiplier
  wire [31:0] prod0 = func_mult32(src1[31:0],   src2[31:0]);
  wire [31:0] prod1 = func_mult32(src1[63:32],  src2[63:32]);
  wire [31:0] prod2 = func_mult32(src1[95:64],  src2[95:64]);
  wire [31:0] prod3 = func_mult32(src1[127:96], src2[127:96]);
  assign des = {prod3, prod2, prod1, prod0};
}

operation mux32.vv {out vector32 des, in vector32 src1, 
                    in vector32 src2, in vector32 src3}{}
{
  //4 way SIMD multiplier
  wire [31:0] res0 = func_mux32(src1[31:0],   src2[31:0],   src3[31:0]);
  wire [31:0] res1 = func_mux32(src1[63:32],  src2[63:32],  src3[63:32]);
  wire [31:0] res2 = func_mux32(src1[95:64],  src2[95:64],  src3[95:64]);
  wire [31:0] res3 = func_mux32(src1[127:96], src2[127:96], src3[127:96]);
  assign des = {res3, res2, res1, res0};
}

//schedule multiplies to 2 cycles
schedule my_sched {mult32.vv}
{
  def des 2;
}

operation inv32.vv {out vector32 des, in vector32 src1}{}
{
  wire [31:0] res0 = func_inv32(src1[31:0]);
  wire [31:0] res1 = func_inv32(src1[63:32]);
  wire [31:0] res2 = func_inv32(src1[95:64]);
  wire [31:0] res3 = func_inv32(src1[127:96]);
  assign des = {res3, res2, res1, res0};
}

; # generate SIMD operation for the following binary operations
; my @ops = ( 'add32', 'sub32', 'and32', 'or32',
;             'gt32', 'lt32', 'gte32', 'lte32', 'lshift32', 'rshift32', 
;             'min32', 'max32');

; foreach $op (@ops) {
; printf("operation %s.vv\n", $op); 
{out vector32 des, in vector32 src1, in vector32 src2}{}
{
  // 4-way SIMD
; foreach $i (0..($N-1)) {
; printf("  wire [31:0] res%d = func_%s(src1[%d:%d], src2[%d:%d]);\n",
;         $i, $op, ($i*32 + 31), ($i*32), 
;         ($i*32 + 31), ($i*32));
; } # end of 'foreach $i...'

  assign des = {res3, res2, res1, res0};
}

; } # end of 'foreach $op...'

  
